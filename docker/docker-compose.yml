version: "3.8"

services:
  # Main application
  minddeck-clone:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: minddeck-clone
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_APP_URL=http://localhost:3000
      - API_SECRET_KEY=${API_SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    env_file:
      - ../.env.docker
    networks:
      - minddeck-network
    volumes:
      - app-data:/app/data
    restart: unless-stopped
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 512M

  # Redis for caching and session storage (optional)
  redis:
    image: redis:7-alpine
    container_name: minddeck-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-defaultpassword}
    networks:
      - minddeck-network
    volumes:
      - redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M

  # PostgreSQL database (optional)
  postgres:
    image: postgres:15-alpine
    container_name: minddeck-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: minddeck
      POSTGRES_USER: ${POSTGRES_USER:-minddeck}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-defaultpassword}
    networks:
      - minddeck-network
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ../docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-minddeck}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: minddeck-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx-logs:/var/log/nginx
      - ssl-certs:/etc/ssl/certs
    networks:
      - minddeck-network
    depends_on:
      - minddeck-clone
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: minddeck-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - minddeck-network
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
    restart: unless-stopped

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: minddeck-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ../docker/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    networks:
      - minddeck-network
    depends_on:
      - prometheus
    restart: unless-stopped

networks:
  minddeck-network:
    driver: bridge

volumes:
  app-data:
  redis-data:
  postgres-data:
  nginx-logs:
  ssl-certs:
  prometheus-data:
  grafana-data:
